/*
 * generated by Xtext 2.15.0
 */
package com.city.network.xtext.ide.contentassist.antlr;

import com.city.network.xtext.ide.contentassist.antlr.internal.InternalCityDslParser;
import com.city.network.xtext.services.CityDslGrammarAccess;
import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class CityDslParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(CityDslGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, CityDslGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getEDoubleAccess().getAlternatives_4_0(), "rule__EDouble__Alternatives_4_0");
			builder.put(grammarAccess.getEFloatAccess().getAlternatives_4_0(), "rule__EFloat__Alternatives_4_0");
			builder.put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
			builder.put(grammarAccess.getEBooleanAccess().getAlternatives(), "rule__EBoolean__Alternatives");
			builder.put(grammarAccess.getTransportTypeAccess().getAlternatives(), "rule__TransportType__Alternatives");
			builder.put(grammarAccess.getTopologyAccess().getAlternatives(), "rule__Topology__Alternatives");
			builder.put(grammarAccess.getCityAccess().getGroup(), "rule__City__Group__0");
			builder.put(grammarAccess.getCityAccess().getGroup_4(), "rule__City__Group_4__0");
			builder.put(grammarAccess.getCityAccess().getGroup_4_2(), "rule__City__Group_4_2__0");
			builder.put(grammarAccess.getCityAccess().getGroup_4_3(), "rule__City__Group_4_3__0");
			builder.put(grammarAccess.getCityAccess().getGroup_4_4(), "rule__City__Group_4_4__0");
			builder.put(grammarAccess.getCityAccess().getGroup_5(), "rule__City__Group_5__0");
			builder.put(grammarAccess.getCityAccess().getGroup_6(), "rule__City__Group_6__0");
			builder.put(grammarAccess.getCityAccess().getGroup_7(), "rule__City__Group_7__0");
			builder.put(grammarAccess.getEDoubleAccess().getGroup(), "rule__EDouble__Group__0");
			builder.put(grammarAccess.getEDoubleAccess().getGroup_4(), "rule__EDouble__Group_4__0");
			builder.put(grammarAccess.getEFloatAccess().getGroup(), "rule__EFloat__Group__0");
			builder.put(grammarAccess.getEFloatAccess().getGroup_4(), "rule__EFloat__Group_4__0");
			builder.put(grammarAccess.getStationAccess().getGroup(), "rule__Station__Group__0");
			builder.put(grammarAccess.getStationAccess().getGroup_3(), "rule__Station__Group_3__0");
			builder.put(grammarAccess.getStationAccess().getGroup_3_2(), "rule__Station__Group_3_2__0");
			builder.put(grammarAccess.getStationAccess().getGroup_3_3(), "rule__Station__Group_3_3__0");
			builder.put(grammarAccess.getStationAccess().getGroup_3_4(), "rule__Station__Group_3_4__0");
			builder.put(grammarAccess.getStationAccess().getGroup_9(), "rule__Station__Group_9__0");
			builder.put(grammarAccess.getStationAccess().getGroup_10(), "rule__Station__Group_10__0");
			builder.put(grammarAccess.getStationAccess().getGroup_11(), "rule__Station__Group_11__0");
			builder.put(grammarAccess.getStationAccess().getGroup_12(), "rule__Station__Group_12__0");
			builder.put(grammarAccess.getLineAccess().getGroup(), "rule__Line__Group__0");
			builder.put(grammarAccess.getLineAccess().getGroup_4(), "rule__Line__Group_4__0");
			builder.put(grammarAccess.getLineAccess().getGroup_5(), "rule__Line__Group_5__0");
			builder.put(grammarAccess.getLineAccess().getGroup_6(), "rule__Line__Group_6__0");
			builder.put(grammarAccess.getLineAccess().getGroup_6_3(), "rule__Line__Group_6_3__0");
			builder.put(grammarAccess.getEIntAccess().getGroup(), "rule__EInt__Group__0");
			builder.put(grammarAccess.getCityAccess().getNameAssignment_2(), "rule__City__NameAssignment_2");
			builder.put(grammarAccess.getCityAccess().getLongitudeAssignment_4_2_1(), "rule__City__LongitudeAssignment_4_2_1");
			builder.put(grammarAccess.getCityAccess().getLatitudeAssignment_4_3_1(), "rule__City__LatitudeAssignment_4_3_1");
			builder.put(grammarAccess.getCityAccess().getAltitudeAssignment_4_4_1(), "rule__City__AltitudeAssignment_4_4_1");
			builder.put(grammarAccess.getCityAccess().getCountryAssignment_5_1(), "rule__City__CountryAssignment_5_1");
			builder.put(grammarAccess.getCityAccess().getStationsAssignment_6_0(), "rule__City__StationsAssignment_6_0");
			builder.put(grammarAccess.getCityAccess().getStationsAssignment_6_1(), "rule__City__StationsAssignment_6_1");
			builder.put(grammarAccess.getCityAccess().getLinesAssignment_7_0(), "rule__City__LinesAssignment_7_0");
			builder.put(grammarAccess.getCityAccess().getLinesAssignment_7_1(), "rule__City__LinesAssignment_7_1");
			builder.put(grammarAccess.getStationAccess().getNameAssignment_1(), "rule__Station__NameAssignment_1");
			builder.put(grammarAccess.getStationAccess().getLongitudeAssignment_3_2_1(), "rule__Station__LongitudeAssignment_3_2_1");
			builder.put(grammarAccess.getStationAccess().getLatitudeAssignment_3_3_1(), "rule__Station__LatitudeAssignment_3_3_1");
			builder.put(grammarAccess.getStationAccess().getAltitudeAssignment_3_4_1(), "rule__Station__AltitudeAssignment_3_4_1");
			builder.put(grammarAccess.getStationAccess().getOfficeAssignment_4(), "rule__Station__OfficeAssignment_4");
			builder.put(grammarAccess.getStationAccess().getOpenedAssignment_5(), "rule__Station__OpenedAssignment_5");
			builder.put(grammarAccess.getStationAccess().getDisabledAccessAssignment_6(), "rule__Station__DisabledAccessAssignment_6");
			builder.put(grammarAccess.getStationAccess().getTypeAssignment_8(), "rule__Station__TypeAssignment_8");
			builder.put(grammarAccess.getStationAccess().getTypeAssignment_9_1(), "rule__Station__TypeAssignment_9_1");
			builder.put(grammarAccess.getStationAccess().getNbOfTicketMachinesAssignment_10_1(), "rule__Station__NbOfTicketMachinesAssignment_10_1");
			builder.put(grammarAccess.getStationAccess().getNbOfElevatorsAssignment_11_1(), "rule__Station__NbOfElevatorsAssignment_11_1");
			builder.put(grammarAccess.getStationAccess().getZoneAssignment_12_1(), "rule__Station__ZoneAssignment_12_1");
			builder.put(grammarAccess.getLineAccess().getNameAssignment_2(), "rule__Line__NameAssignment_2");
			builder.put(grammarAccess.getLineAccess().getTypeAssignment_4_1(), "rule__Line__TypeAssignment_4_1");
			builder.put(grammarAccess.getLineAccess().getTopologyAssignment_5_1(), "rule__Line__TopologyAssignment_5_1");
			builder.put(grammarAccess.getLineAccess().getStationsAssignment_6_2(), "rule__Line__StationsAssignment_6_2");
			builder.put(grammarAccess.getLineAccess().getStationsAssignment_6_3_1(), "rule__Line__StationsAssignment_6_3_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private CityDslGrammarAccess grammarAccess;

	@Override
	protected InternalCityDslParser createParser() {
		InternalCityDslParser result = new InternalCityDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public CityDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(CityDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
