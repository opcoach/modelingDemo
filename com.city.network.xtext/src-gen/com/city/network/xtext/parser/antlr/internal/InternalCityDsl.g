/*
 * generated by Xtext 2.15.0
 */
grammar InternalCityDsl;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package com.city.network.xtext.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package com.city.network.xtext.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import com.city.network.xtext.services.CityDslGrammarAccess;

}

@parser::members {

 	private CityDslGrammarAccess grammarAccess;

    public InternalCityDslParser(TokenStream input, CityDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "City";
   	}

   	@Override
   	protected CityDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleCity
entryRuleCity returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCityRule()); }
	iv_ruleCity=ruleCity
	{ $current=$iv_ruleCity.current; }
	EOF;

// Rule City
ruleCity returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getCityAccess().getCityAction_0(),
					$current);
			}
		)
		otherlv_1='City'
		{
			newLeafNode(otherlv_1, grammarAccess.getCityAccess().getCityKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCityAccess().getNameEStringParserRuleCall_2_0());
				}
				lv_name_2_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCityRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"com.city.network.xtext.CityDsl.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='{'
		{
			newLeafNode(otherlv_3, grammarAccess.getCityAccess().getLeftCurlyBracketKeyword_3());
		}
		(
			otherlv_4='location'
			{
				newLeafNode(otherlv_4, grammarAccess.getCityAccess().getLocationKeyword_4_0());
			}
			otherlv_5='('
			{
				newLeafNode(otherlv_5, grammarAccess.getCityAccess().getLeftParenthesisKeyword_4_1());
			}
			(
				otherlv_6='longitude'
				{
					newLeafNode(otherlv_6, grammarAccess.getCityAccess().getLongitudeKeyword_4_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getCityAccess().getLongitudeEDoubleParserRuleCall_4_2_1_0());
						}
						lv_longitude_7_0=ruleEDouble
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getCityRule());
							}
							set(
								$current,
								"longitude",
								lv_longitude_7_0,
								"com.city.network.xtext.CityDsl.EDouble");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			(
				otherlv_8='latitude'
				{
					newLeafNode(otherlv_8, grammarAccess.getCityAccess().getLatitudeKeyword_4_3_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getCityAccess().getLatitudeEDoubleParserRuleCall_4_3_1_0());
						}
						lv_latitude_9_0=ruleEDouble
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getCityRule());
							}
							set(
								$current,
								"latitude",
								lv_latitude_9_0,
								"com.city.network.xtext.CityDsl.EDouble");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			(
				otherlv_10='altitude'
				{
					newLeafNode(otherlv_10, grammarAccess.getCityAccess().getAltitudeKeyword_4_4_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getCityAccess().getAltitudeEFloatParserRuleCall_4_4_1_0());
						}
						lv_altitude_11_0=ruleEFloat
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getCityRule());
							}
							set(
								$current,
								"altitude",
								lv_altitude_11_0,
								"com.city.network.xtext.CityDsl.EFloat");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			otherlv_12=')'
			{
				newLeafNode(otherlv_12, grammarAccess.getCityAccess().getRightParenthesisKeyword_4_5());
			}
		)?
		(
			otherlv_13='country'
			{
				newLeafNode(otherlv_13, grammarAccess.getCityAccess().getCountryKeyword_5_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getCityAccess().getCountryEStringParserRuleCall_5_1_0());
					}
					lv_country_14_0=ruleEString
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCityRule());
						}
						set(
							$current,
							"country",
							lv_country_14_0,
							"com.city.network.xtext.CityDsl.EString");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getCityAccess().getStationsStationParserRuleCall_6_0_0());
					}
					lv_stations_15_0=ruleStation
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCityRule());
						}
						add(
							$current,
							"stations",
							lv_stations_15_0,
							"com.city.network.xtext.CityDsl.Station");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getCityAccess().getStationsStationParserRuleCall_6_1_0());
					}
					lv_stations_16_0=ruleStation
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCityRule());
						}
						add(
							$current,
							"stations",
							lv_stations_16_0,
							"com.city.network.xtext.CityDsl.Station");
						afterParserOrEnumRuleCall();
					}
				)
			)*
		)?
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getCityAccess().getLinesLineParserRuleCall_7_0_0());
					}
					lv_lines_17_0=ruleLine
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCityRule());
						}
						add(
							$current,
							"lines",
							lv_lines_17_0,
							"com.city.network.xtext.CityDsl.Line");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getCityAccess().getLinesLineParserRuleCall_7_1_0());
					}
					lv_lines_18_0=ruleLine
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCityRule());
						}
						add(
							$current,
							"lines",
							lv_lines_18_0,
							"com.city.network.xtext.CityDsl.Line");
						afterParserOrEnumRuleCall();
					}
				)
			)*
		)?
		otherlv_19='}'
		{
			newLeafNode(otherlv_19, grammarAccess.getCityAccess().getRightCurlyBracketKeyword_8());
		}
	)
;

// Entry rule entryRuleEDouble
entryRuleEDouble returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEDoubleRule()); }
	iv_ruleEDouble=ruleEDouble
	{ $current=$iv_ruleEDouble.current.getText(); }
	EOF;

// Rule EDouble
ruleEDouble returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='-'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getEDoubleAccess().getHyphenMinusKeyword_0());
			}
		)?
		(
			this_INT_1=RULE_INT
			{
				$current.merge(this_INT_1);
			}
			{
				newLeafNode(this_INT_1, grammarAccess.getEDoubleAccess().getINTTerminalRuleCall_1());
			}
		)?
		kw='.'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEDoubleAccess().getFullStopKeyword_2());
		}
		this_INT_3=RULE_INT
		{
			$current.merge(this_INT_3);
		}
		{
			newLeafNode(this_INT_3, grammarAccess.getEDoubleAccess().getINTTerminalRuleCall_3());
		}
		(
			(
				kw='E'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getEDoubleAccess().getEKeyword_4_0_0());
				}
				    |
				kw='e'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getEDoubleAccess().getEKeyword_4_0_1());
				}
			)
			(
				kw='-'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getEDoubleAccess().getHyphenMinusKeyword_4_1());
				}
			)?
			this_INT_7=RULE_INT
			{
				$current.merge(this_INT_7);
			}
			{
				newLeafNode(this_INT_7, grammarAccess.getEDoubleAccess().getINTTerminalRuleCall_4_2());
			}
		)?
	)
;

// Entry rule entryRuleEFloat
entryRuleEFloat returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEFloatRule()); }
	iv_ruleEFloat=ruleEFloat
	{ $current=$iv_ruleEFloat.current.getText(); }
	EOF;

// Rule EFloat
ruleEFloat returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='-'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getEFloatAccess().getHyphenMinusKeyword_0());
			}
		)?
		(
			this_INT_1=RULE_INT
			{
				$current.merge(this_INT_1);
			}
			{
				newLeafNode(this_INT_1, grammarAccess.getEFloatAccess().getINTTerminalRuleCall_1());
			}
		)?
		kw='.'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEFloatAccess().getFullStopKeyword_2());
		}
		this_INT_3=RULE_INT
		{
			$current.merge(this_INT_3);
		}
		{
			newLeafNode(this_INT_3, grammarAccess.getEFloatAccess().getINTTerminalRuleCall_3());
		}
		(
			(
				kw='E'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getEFloatAccess().getEKeyword_4_0_0());
				}
				    |
				kw='e'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getEFloatAccess().getEKeyword_4_0_1());
				}
			)
			(
				kw='-'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getEFloatAccess().getHyphenMinusKeyword_4_1());
				}
			)?
			this_INT_7=RULE_INT
			{
				$current.merge(this_INT_7);
			}
			{
				newLeafNode(this_INT_7, grammarAccess.getEFloatAccess().getINTTerminalRuleCall_4_2());
			}
		)?
	)
;

// Entry rule entryRuleEString
entryRuleEString returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEStringRule()); }
	iv_ruleEString=ruleEString
	{ $current=$iv_ruleEString.current.getText(); }
	EOF;

// Rule EString
ruleEString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_STRING_0=RULE_STRING
		{
			$current.merge(this_STRING_0);
		}
		{
			newLeafNode(this_STRING_0, grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0());
		}
		    |
		this_ID_1=RULE_ID
		{
			$current.merge(this_ID_1);
		}
		{
			newLeafNode(this_ID_1, grammarAccess.getEStringAccess().getIDTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleStation
entryRuleStation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStationRule()); }
	iv_ruleStation=ruleStation
	{ $current=$iv_ruleStation.current; }
	EOF;

// Rule Station
ruleStation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Station'
		{
			newLeafNode(otherlv_0, grammarAccess.getStationAccess().getStationKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getStationAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getStationRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getStationAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			otherlv_3='location'
			{
				newLeafNode(otherlv_3, grammarAccess.getStationAccess().getLocationKeyword_3_0());
			}
			otherlv_4='('
			{
				newLeafNode(otherlv_4, grammarAccess.getStationAccess().getLeftParenthesisKeyword_3_1());
			}
			(
				otherlv_5='longitude'
				{
					newLeafNode(otherlv_5, grammarAccess.getStationAccess().getLongitudeKeyword_3_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getStationAccess().getLongitudeEDoubleParserRuleCall_3_2_1_0());
						}
						lv_longitude_6_0=ruleEDouble
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getStationRule());
							}
							set(
								$current,
								"longitude",
								lv_longitude_6_0,
								"com.city.network.xtext.CityDsl.EDouble");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			(
				otherlv_7='latitude'
				{
					newLeafNode(otherlv_7, grammarAccess.getStationAccess().getLatitudeKeyword_3_3_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getStationAccess().getLatitudeEDoubleParserRuleCall_3_3_1_0());
						}
						lv_latitude_8_0=ruleEDouble
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getStationRule());
							}
							set(
								$current,
								"latitude",
								lv_latitude_8_0,
								"com.city.network.xtext.CityDsl.EDouble");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			(
				otherlv_9='altitude'
				{
					newLeafNode(otherlv_9, grammarAccess.getStationAccess().getAltitudeKeyword_3_4_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getStationAccess().getAltitudeEFloatParserRuleCall_3_4_1_0());
						}
						lv_altitude_10_0=ruleEFloat
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getStationRule());
							}
							set(
								$current,
								"altitude",
								lv_altitude_10_0,
								"com.city.network.xtext.CityDsl.EFloat");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			otherlv_11=')'
			{
				newLeafNode(otherlv_11, grammarAccess.getStationAccess().getRightParenthesisKeyword_3_5());
			}
		)?
		(
			(
				lv_office_12_0='hasOffice'
				{
					newLeafNode(lv_office_12_0, grammarAccess.getStationAccess().getOfficeHasOfficeKeyword_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getStationRule());
					}
					setWithLastConsumed($current, "office", true, "hasOffice");
				}
			)
		)?
		(
			(
				lv_opened_13_0='isOpened'
				{
					newLeafNode(lv_opened_13_0, grammarAccess.getStationAccess().getOpenedIsOpenedKeyword_5_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getStationRule());
					}
					setWithLastConsumed($current, "opened", true, "isOpened");
				}
			)
		)?
		(
			(
				lv_disabledAccess_14_0='hasDisabledAccess'
				{
					newLeafNode(lv_disabledAccess_14_0, grammarAccess.getStationAccess().getDisabledAccessHasDisabledAccessKeyword_6_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getStationRule());
					}
					setWithLastConsumed($current, "disabledAccess", true, "hasDisabledAccess");
				}
			)
		)?
		otherlv_15='type'
		{
			newLeafNode(otherlv_15, grammarAccess.getStationAccess().getTypeKeyword_7());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getStationAccess().getTypeTransportTypeEnumRuleCall_8_0());
				}
				lv_type_16_0=ruleTransportType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStationRule());
					}
					add(
						$current,
						"type",
						lv_type_16_0,
						"com.city.network.xtext.CityDsl.TransportType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_17=','
			{
				newLeafNode(otherlv_17, grammarAccess.getStationAccess().getCommaKeyword_9_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getStationAccess().getTypeTransportTypeEnumRuleCall_9_1_0());
					}
					lv_type_18_0=ruleTransportType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getStationRule());
						}
						add(
							$current,
							"type",
							lv_type_18_0,
							"com.city.network.xtext.CityDsl.TransportType");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		(
			otherlv_19='nbOfTicketMachines'
			{
				newLeafNode(otherlv_19, grammarAccess.getStationAccess().getNbOfTicketMachinesKeyword_10_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getStationAccess().getNbOfTicketMachinesEIntParserRuleCall_10_1_0());
					}
					lv_nbOfTicketMachines_20_0=ruleEInt
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getStationRule());
						}
						set(
							$current,
							"nbOfTicketMachines",
							lv_nbOfTicketMachines_20_0,
							"com.city.network.xtext.CityDsl.EInt");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			otherlv_21='nbOfElevators'
			{
				newLeafNode(otherlv_21, grammarAccess.getStationAccess().getNbOfElevatorsKeyword_11_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getStationAccess().getNbOfElevatorsEIntParserRuleCall_11_1_0());
					}
					lv_nbOfElevators_22_0=ruleEInt
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getStationRule());
						}
						set(
							$current,
							"nbOfElevators",
							lv_nbOfElevators_22_0,
							"com.city.network.xtext.CityDsl.EInt");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			otherlv_23='zone'
			{
				newLeafNode(otherlv_23, grammarAccess.getStationAccess().getZoneKeyword_12_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getStationAccess().getZoneEIntParserRuleCall_12_1_0());
					}
					lv_zone_24_0=ruleEInt
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getStationRule());
						}
						set(
							$current,
							"zone",
							lv_zone_24_0,
							"com.city.network.xtext.CityDsl.EInt");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_25='}'
		{
			newLeafNode(otherlv_25, grammarAccess.getStationAccess().getRightCurlyBracketKeyword_13());
		}
	)
;

// Entry rule entryRuleLine
entryRuleLine returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLineRule()); }
	iv_ruleLine=ruleLine
	{ $current=$iv_ruleLine.current; }
	EOF;

// Rule Line
ruleLine returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getLineAccess().getLineAction_0(),
					$current);
			}
		)
		otherlv_1='Line'
		{
			newLeafNode(otherlv_1, grammarAccess.getLineAccess().getLineKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getLineAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLineRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_3='{'
		{
			newLeafNode(otherlv_3, grammarAccess.getLineAccess().getLeftCurlyBracketKeyword_3());
		}
		(
			otherlv_4='of'
			{
				newLeafNode(otherlv_4, grammarAccess.getLineAccess().getOfKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getLineAccess().getTypeTransportTypeEnumRuleCall_4_1_0());
					}
					lv_type_5_0=ruleTransportType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLineRule());
						}
						set(
							$current,
							"type",
							lv_type_5_0,
							"com.city.network.xtext.CityDsl.TransportType");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			otherlv_6='topology'
			{
				newLeafNode(otherlv_6, grammarAccess.getLineAccess().getTopologyKeyword_5_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getLineAccess().getTopologyTopologyEnumRuleCall_5_1_0());
					}
					lv_topology_7_0=ruleTopology
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLineRule());
						}
						set(
							$current,
							"topology",
							lv_topology_7_0,
							"com.city.network.xtext.CityDsl.Topology");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			otherlv_8='stations'
			{
				newLeafNode(otherlv_8, grammarAccess.getLineAccess().getStationsKeyword_6_0());
			}
			otherlv_9='('
			{
				newLeafNode(otherlv_9, grammarAccess.getLineAccess().getLeftParenthesisKeyword_6_1());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getLineRule());
						}
					}
					otherlv_10=RULE_ID
					{
						newLeafNode(otherlv_10, grammarAccess.getLineAccess().getStationsStationCrossReference_6_2_0());
					}
				)
			)
			(
				otherlv_11=','
				{
					newLeafNode(otherlv_11, grammarAccess.getLineAccess().getCommaKeyword_6_3_0());
				}
				(
					(
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getLineRule());
							}
						}
						otherlv_12=RULE_ID
						{
							newLeafNode(otherlv_12, grammarAccess.getLineAccess().getStationsStationCrossReference_6_3_1_0());
						}
					)
				)
			)*
			otherlv_13=')'
			{
				newLeafNode(otherlv_13, grammarAccess.getLineAccess().getRightParenthesisKeyword_6_4());
			}
		)?
		otherlv_14='}'
		{
			newLeafNode(otherlv_14, grammarAccess.getLineAccess().getRightCurlyBracketKeyword_7());
		}
	)
;

// Entry rule entryRuleEInt
entryRuleEInt returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEIntRule()); }
	iv_ruleEInt=ruleEInt
	{ $current=$iv_ruleEInt.current.getText(); }
	EOF;

// Rule EInt
ruleEInt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='-'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getEIntAccess().getHyphenMinusKeyword_0());
			}
		)?
		this_INT_1=RULE_INT
		{
			$current.merge(this_INT_1);
		}
		{
			newLeafNode(this_INT_1, grammarAccess.getEIntAccess().getINTTerminalRuleCall_1());
		}
	)
;

// Rule TransportType
ruleTransportType returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='BUS'
			{
				$current = grammarAccess.getTransportTypeAccess().getBUSEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getTransportTypeAccess().getBUSEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='METRO'
			{
				$current = grammarAccess.getTransportTypeAccess().getMETROEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getTransportTypeAccess().getMETROEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='TRAIN'
			{
				$current = grammarAccess.getTransportTypeAccess().getTRAINEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getTransportTypeAccess().getTRAINEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='TRAMWAY'
			{
				$current = grammarAccess.getTransportTypeAccess().getTRAMWAYEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getTransportTypeAccess().getTRAMWAYEnumLiteralDeclaration_3());
			}
		)
	)
;

// Rule Topology
ruleTopology returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='LINEAR'
			{
				$current = grammarAccess.getTopologyAccess().getLINEAREnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getTopologyAccess().getLINEAREnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='CIRCULAR'
			{
				$current = grammarAccess.getTopologyAccess().getCIRCULAREnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getTopologyAccess().getCIRCULAREnumLiteralDeclaration_1());
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
