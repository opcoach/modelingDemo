/*
 * generated by Xtext 2.15.0
 */
package com.city.network.xtext.serializer;

import com.city.network.MCity;
import com.city.network.MLine;
import com.city.network.MNetworkPackage;
import com.city.network.MStation;
import com.city.network.xtext.services.CityDslGrammarAccess;
import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;

@SuppressWarnings("all")
public class CityDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private CityDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == MNetworkPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case MNetworkPackage.CITY:
				sequence_City(context, (MCity) semanticObject); 
				return; 
			case MNetworkPackage.LINE:
				sequence_Line(context, (MLine) semanticObject); 
				return; 
			case MNetworkPackage.STATION:
				sequence_Station(context, (MStation) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     City returns City
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         (longitude=EDouble latitude=EDouble altitude=EFloat)? 
	 *         country=EString? 
	 *         (stations+=Station stations+=Station*)? 
	 *         (lines+=Line lines+=Line*)?
	 *     )
	 */
	protected void sequence_City(ISerializationContext context, MCity semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Line returns Line
	 *
	 * Constraint:
	 *     (name=ID type=TransportType? topology=Topology? (stations+=[Station|ID] stations+=[Station|ID]*)?)
	 */
	protected void sequence_Line(ISerializationContext context, MLine semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Station returns Station
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         (longitude=EDouble latitude=EDouble altitude=EFloat)? 
	 *         office?='hasOffice'? 
	 *         opened?='isOpened'? 
	 *         disabledAccess?='hasDisabledAccess'? 
	 *         type+=TransportType 
	 *         type+=TransportType* 
	 *         nbOfTicketMachines=EInt? 
	 *         nbOfElevators=EInt? 
	 *         zone=EInt?
	 *     )
	 */
	protected void sequence_Station(ISerializationContext context, MStation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
