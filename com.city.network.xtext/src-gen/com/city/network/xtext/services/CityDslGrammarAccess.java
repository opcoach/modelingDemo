/*
 * generated by Xtext 2.15.0
 */
package com.city.network.xtext.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class CityDslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class CityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.city.network.xtext.CityDsl.City");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCityAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cCityKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLocationKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cLongitudeKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cLongitudeAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final RuleCall cLongitudeEDoubleParserRuleCall_4_2_1_0 = (RuleCall)cLongitudeAssignment_4_2_1.eContents().get(0);
		private final Group cGroup_4_3 = (Group)cGroup_4.eContents().get(3);
		private final Keyword cLatitudeKeyword_4_3_0 = (Keyword)cGroup_4_3.eContents().get(0);
		private final Assignment cLatitudeAssignment_4_3_1 = (Assignment)cGroup_4_3.eContents().get(1);
		private final RuleCall cLatitudeEDoubleParserRuleCall_4_3_1_0 = (RuleCall)cLatitudeAssignment_4_3_1.eContents().get(0);
		private final Group cGroup_4_4 = (Group)cGroup_4.eContents().get(4);
		private final Keyword cAltitudeKeyword_4_4_0 = (Keyword)cGroup_4_4.eContents().get(0);
		private final Assignment cAltitudeAssignment_4_4_1 = (Assignment)cGroup_4_4.eContents().get(1);
		private final RuleCall cAltitudeEFloatParserRuleCall_4_4_1_0 = (RuleCall)cAltitudeAssignment_4_4_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_5 = (Keyword)cGroup_4.eContents().get(5);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCountryKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cCountryAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cCountryEStringParserRuleCall_5_1_0 = (RuleCall)cCountryAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Assignment cStationsAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final RuleCall cStationsStationParserRuleCall_6_0_0 = (RuleCall)cStationsAssignment_6_0.eContents().get(0);
		private final Assignment cStationsAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cStationsStationParserRuleCall_6_1_0 = (RuleCall)cStationsAssignment_6_1.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Assignment cLinesAssignment_7_0 = (Assignment)cGroup_7.eContents().get(0);
		private final RuleCall cLinesLineParserRuleCall_7_0_0 = (RuleCall)cLinesAssignment_7_0.eContents().get(0);
		private final Assignment cLinesAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cLinesLineParserRuleCall_7_1_0 = (RuleCall)cLinesAssignment_7_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//City:
		//	{City}
		//	'City'
		//	name=EString
		//	'{' ('location' '(' ('longitude' longitude=EDouble) ('latitude' latitude=EDouble) ('altitude' altitude=EFloat) ')')?
		//	('country' country=EString)? (stations+=Station stations+=Station*)? (lines+=Line lines+=Line*)?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{City} 'City' name=EString '{' ('location' '(' ('longitude' longitude=EDouble) ('latitude' latitude=EDouble) ('altitude'
		//altitude=EFloat) ')')? ('country' country=EString)? (stations+=Station stations+=Station*)? (lines+=Line lines+=Line*)?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{City}
		public Action getCityAction_0() { return cCityAction_0; }
		
		//'City'
		public Keyword getCityKeyword_1() { return cCityKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//('location' '(' ('longitude' longitude=EDouble) ('latitude' latitude=EDouble) ('altitude' altitude=EFloat) ')')?
		public Group getGroup_4() { return cGroup_4; }
		
		//'location'
		public Keyword getLocationKeyword_4_0() { return cLocationKeyword_4_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4_1() { return cLeftParenthesisKeyword_4_1; }
		
		//'longitude' longitude=EDouble
		public Group getGroup_4_2() { return cGroup_4_2; }
		
		//'longitude'
		public Keyword getLongitudeKeyword_4_2_0() { return cLongitudeKeyword_4_2_0; }
		
		//longitude=EDouble
		public Assignment getLongitudeAssignment_4_2_1() { return cLongitudeAssignment_4_2_1; }
		
		//EDouble
		public RuleCall getLongitudeEDoubleParserRuleCall_4_2_1_0() { return cLongitudeEDoubleParserRuleCall_4_2_1_0; }
		
		//'latitude' latitude=EDouble
		public Group getGroup_4_3() { return cGroup_4_3; }
		
		//'latitude'
		public Keyword getLatitudeKeyword_4_3_0() { return cLatitudeKeyword_4_3_0; }
		
		//latitude=EDouble
		public Assignment getLatitudeAssignment_4_3_1() { return cLatitudeAssignment_4_3_1; }
		
		//EDouble
		public RuleCall getLatitudeEDoubleParserRuleCall_4_3_1_0() { return cLatitudeEDoubleParserRuleCall_4_3_1_0; }
		
		//'altitude' altitude=EFloat
		public Group getGroup_4_4() { return cGroup_4_4; }
		
		//'altitude'
		public Keyword getAltitudeKeyword_4_4_0() { return cAltitudeKeyword_4_4_0; }
		
		//altitude=EFloat
		public Assignment getAltitudeAssignment_4_4_1() { return cAltitudeAssignment_4_4_1; }
		
		//EFloat
		public RuleCall getAltitudeEFloatParserRuleCall_4_4_1_0() { return cAltitudeEFloatParserRuleCall_4_4_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4_5() { return cRightParenthesisKeyword_4_5; }
		
		//('country' country=EString)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'country'
		public Keyword getCountryKeyword_5_0() { return cCountryKeyword_5_0; }
		
		//country=EString
		public Assignment getCountryAssignment_5_1() { return cCountryAssignment_5_1; }
		
		//EString
		public RuleCall getCountryEStringParserRuleCall_5_1_0() { return cCountryEStringParserRuleCall_5_1_0; }
		
		//(stations+=Station stations+=Station*)?
		public Group getGroup_6() { return cGroup_6; }
		
		//stations+=Station
		public Assignment getStationsAssignment_6_0() { return cStationsAssignment_6_0; }
		
		//Station
		public RuleCall getStationsStationParserRuleCall_6_0_0() { return cStationsStationParserRuleCall_6_0_0; }
		
		//stations+=Station*
		public Assignment getStationsAssignment_6_1() { return cStationsAssignment_6_1; }
		
		//Station
		public RuleCall getStationsStationParserRuleCall_6_1_0() { return cStationsStationParserRuleCall_6_1_0; }
		
		//(lines+=Line lines+=Line*)?
		public Group getGroup_7() { return cGroup_7; }
		
		//lines+=Line
		public Assignment getLinesAssignment_7_0() { return cLinesAssignment_7_0; }
		
		//Line
		public RuleCall getLinesLineParserRuleCall_7_0_0() { return cLinesLineParserRuleCall_7_0_0; }
		
		//lines+=Line*
		public Assignment getLinesAssignment_7_1() { return cLinesAssignment_7_1; }
		
		//Line
		public RuleCall getLinesLineParserRuleCall_7_1_0() { return cLinesLineParserRuleCall_7_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	public class EDoubleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.city.network.xtext.CityDsl.EDouble");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cINTTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_4_0 = (Alternatives)cGroup_4.eContents().get(0);
		private final Keyword cEKeyword_4_0_0 = (Keyword)cAlternatives_4_0.eContents().get(0);
		private final Keyword cEKeyword_4_0_1 = (Keyword)cAlternatives_4_0.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_4_2 = (RuleCall)cGroup_4.eContents().get(2);
		
		//EDouble ecore::EDouble:
		//	'-'? INT? '.' INT (('E' | 'e') '-'? INT)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT? '.' INT (('E' | 'e') '-'? INT)?
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT?
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
		
		//'.'
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_3() { return cINTTerminalRuleCall_3; }
		
		//(('E' | 'e') '-'? INT)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'E' | 'e'
		public Alternatives getAlternatives_4_0() { return cAlternatives_4_0; }
		
		//'E'
		public Keyword getEKeyword_4_0_0() { return cEKeyword_4_0_0; }
		
		//'e'
		public Keyword getEKeyword_4_0_1() { return cEKeyword_4_0_1; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_4_1() { return cHyphenMinusKeyword_4_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_4_2() { return cINTTerminalRuleCall_4_2; }
	}
	public class EFloatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.city.network.xtext.CityDsl.EFloat");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cINTTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_4_0 = (Alternatives)cGroup_4.eContents().get(0);
		private final Keyword cEKeyword_4_0_0 = (Keyword)cAlternatives_4_0.eContents().get(0);
		private final Keyword cEKeyword_4_0_1 = (Keyword)cAlternatives_4_0.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_4_2 = (RuleCall)cGroup_4.eContents().get(2);
		
		//EFloat ecore::EFloat:
		//	'-'? INT? '.' INT (('E' | 'e') '-'? INT)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT? '.' INT (('E' | 'e') '-'? INT)?
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT?
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
		
		//'.'
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_3() { return cINTTerminalRuleCall_3; }
		
		//(('E' | 'e') '-'? INT)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'E' | 'e'
		public Alternatives getAlternatives_4_0() { return cAlternatives_4_0; }
		
		//'E'
		public Keyword getEKeyword_4_0_0() { return cEKeyword_4_0_0; }
		
		//'e'
		public Keyword getEKeyword_4_0_1() { return cEKeyword_4_0_1; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_4_1() { return cHyphenMinusKeyword_4_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_4_2() { return cINTTerminalRuleCall_4_2; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.city.network.xtext.CityDsl.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString:
		//	STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class StationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.city.network.xtext.CityDsl.Station");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLocationKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cLongitudeKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cLongitudeAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cLongitudeEDoubleParserRuleCall_3_2_1_0 = (RuleCall)cLongitudeAssignment_3_2_1.eContents().get(0);
		private final Group cGroup_3_3 = (Group)cGroup_3.eContents().get(3);
		private final Keyword cLatitudeKeyword_3_3_0 = (Keyword)cGroup_3_3.eContents().get(0);
		private final Assignment cLatitudeAssignment_3_3_1 = (Assignment)cGroup_3_3.eContents().get(1);
		private final RuleCall cLatitudeEDoubleParserRuleCall_3_3_1_0 = (RuleCall)cLatitudeAssignment_3_3_1.eContents().get(0);
		private final Group cGroup_3_4 = (Group)cGroup_3.eContents().get(4);
		private final Keyword cAltitudeKeyword_3_4_0 = (Keyword)cGroup_3_4.eContents().get(0);
		private final Assignment cAltitudeAssignment_3_4_1 = (Assignment)cGroup_3_4.eContents().get(1);
		private final RuleCall cAltitudeEFloatParserRuleCall_3_4_1_0 = (RuleCall)cAltitudeAssignment_3_4_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_5 = (Keyword)cGroup_3.eContents().get(5);
		private final Assignment cOfficeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Keyword cOfficeHasOfficeKeyword_4_0 = (Keyword)cOfficeAssignment_4.eContents().get(0);
		private final Assignment cOpenedAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final Keyword cOpenedIsOpenedKeyword_5_0 = (Keyword)cOpenedAssignment_5.eContents().get(0);
		private final Assignment cDisabledAccessAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final Keyword cDisabledAccessHasDisabledAccessKeyword_6_0 = (Keyword)cDisabledAccessAssignment_6.eContents().get(0);
		private final Keyword cTypeKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cTypeAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cTypeTransportTypeEnumRuleCall_8_0 = (RuleCall)cTypeAssignment_8.eContents().get(0);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cCommaKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Assignment cTypeAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final RuleCall cTypeTransportTypeEnumRuleCall_9_1_0 = (RuleCall)cTypeAssignment_9_1.eContents().get(0);
		private final Group cGroup_10 = (Group)cGroup.eContents().get(10);
		private final Keyword cNbOfTicketMachinesKeyword_10_0 = (Keyword)cGroup_10.eContents().get(0);
		private final Assignment cNbOfTicketMachinesAssignment_10_1 = (Assignment)cGroup_10.eContents().get(1);
		private final RuleCall cNbOfTicketMachinesEIntParserRuleCall_10_1_0 = (RuleCall)cNbOfTicketMachinesAssignment_10_1.eContents().get(0);
		private final Group cGroup_11 = (Group)cGroup.eContents().get(11);
		private final Keyword cNbOfElevatorsKeyword_11_0 = (Keyword)cGroup_11.eContents().get(0);
		private final Assignment cNbOfElevatorsAssignment_11_1 = (Assignment)cGroup_11.eContents().get(1);
		private final RuleCall cNbOfElevatorsEIntParserRuleCall_11_1_0 = (RuleCall)cNbOfElevatorsAssignment_11_1.eContents().get(0);
		private final Group cGroup_12 = (Group)cGroup.eContents().get(12);
		private final Keyword cZoneKeyword_12_0 = (Keyword)cGroup_12.eContents().get(0);
		private final Assignment cZoneAssignment_12_1 = (Assignment)cGroup_12.eContents().get(1);
		private final RuleCall cZoneEIntParserRuleCall_12_1_0 = (RuleCall)cZoneAssignment_12_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_13 = (Keyword)cGroup.eContents().get(13);
		
		//Station:
		//	'Station'
		//	name=ID '{' ('location' '(' ('longitude' longitude=EDouble) ('latitude' latitude=EDouble) ('altitude' altitude=EFloat)
		//	')')?
		//	office?='hasOffice'?
		//	opened?='isOpened'?
		//	disabledAccess?='hasDisabledAccess'?
		//	'type' type+=TransportType ("," type+=TransportType)* ('nbOfTicketMachines' nbOfTicketMachines=EInt)? ('nbOfElevators'
		//	nbOfElevators=EInt)? ('zone' zone=EInt)? '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Station' name=ID '{' ('location' '(' ('longitude' longitude=EDouble) ('latitude' latitude=EDouble) ('altitude'
		//altitude=EFloat) ')')? office?='hasOffice'? opened?='isOpened'? disabledAccess?='hasDisabledAccess'? 'type'
		//type+=TransportType ("," type+=TransportType)* ('nbOfTicketMachines' nbOfTicketMachines=EInt)? ('nbOfElevators'
		//nbOfElevators=EInt)? ('zone' zone=EInt)? '}'
		public Group getGroup() { return cGroup; }
		
		//'Station'
		public Keyword getStationKeyword_0() { return cStationKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('location' '(' ('longitude' longitude=EDouble) ('latitude' latitude=EDouble) ('altitude' altitude=EFloat) ')')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'location'
		public Keyword getLocationKeyword_3_0() { return cLocationKeyword_3_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_1() { return cLeftParenthesisKeyword_3_1; }
		
		//'longitude' longitude=EDouble
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//'longitude'
		public Keyword getLongitudeKeyword_3_2_0() { return cLongitudeKeyword_3_2_0; }
		
		//longitude=EDouble
		public Assignment getLongitudeAssignment_3_2_1() { return cLongitudeAssignment_3_2_1; }
		
		//EDouble
		public RuleCall getLongitudeEDoubleParserRuleCall_3_2_1_0() { return cLongitudeEDoubleParserRuleCall_3_2_1_0; }
		
		//'latitude' latitude=EDouble
		public Group getGroup_3_3() { return cGroup_3_3; }
		
		//'latitude'
		public Keyword getLatitudeKeyword_3_3_0() { return cLatitudeKeyword_3_3_0; }
		
		//latitude=EDouble
		public Assignment getLatitudeAssignment_3_3_1() { return cLatitudeAssignment_3_3_1; }
		
		//EDouble
		public RuleCall getLatitudeEDoubleParserRuleCall_3_3_1_0() { return cLatitudeEDoubleParserRuleCall_3_3_1_0; }
		
		//'altitude' altitude=EFloat
		public Group getGroup_3_4() { return cGroup_3_4; }
		
		//'altitude'
		public Keyword getAltitudeKeyword_3_4_0() { return cAltitudeKeyword_3_4_0; }
		
		//altitude=EFloat
		public Assignment getAltitudeAssignment_3_4_1() { return cAltitudeAssignment_3_4_1; }
		
		//EFloat
		public RuleCall getAltitudeEFloatParserRuleCall_3_4_1_0() { return cAltitudeEFloatParserRuleCall_3_4_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_5() { return cRightParenthesisKeyword_3_5; }
		
		//office?='hasOffice'?
		public Assignment getOfficeAssignment_4() { return cOfficeAssignment_4; }
		
		//'hasOffice'
		public Keyword getOfficeHasOfficeKeyword_4_0() { return cOfficeHasOfficeKeyword_4_0; }
		
		//opened?='isOpened'?
		public Assignment getOpenedAssignment_5() { return cOpenedAssignment_5; }
		
		//'isOpened'
		public Keyword getOpenedIsOpenedKeyword_5_0() { return cOpenedIsOpenedKeyword_5_0; }
		
		//disabledAccess?='hasDisabledAccess'?
		public Assignment getDisabledAccessAssignment_6() { return cDisabledAccessAssignment_6; }
		
		//'hasDisabledAccess'
		public Keyword getDisabledAccessHasDisabledAccessKeyword_6_0() { return cDisabledAccessHasDisabledAccessKeyword_6_0; }
		
		//'type'
		public Keyword getTypeKeyword_7() { return cTypeKeyword_7; }
		
		//type+=TransportType
		public Assignment getTypeAssignment_8() { return cTypeAssignment_8; }
		
		//TransportType
		public RuleCall getTypeTransportTypeEnumRuleCall_8_0() { return cTypeTransportTypeEnumRuleCall_8_0; }
		
		//("," type+=TransportType)*
		public Group getGroup_9() { return cGroup_9; }
		
		//","
		public Keyword getCommaKeyword_9_0() { return cCommaKeyword_9_0; }
		
		//type+=TransportType
		public Assignment getTypeAssignment_9_1() { return cTypeAssignment_9_1; }
		
		//TransportType
		public RuleCall getTypeTransportTypeEnumRuleCall_9_1_0() { return cTypeTransportTypeEnumRuleCall_9_1_0; }
		
		//('nbOfTicketMachines' nbOfTicketMachines=EInt)?
		public Group getGroup_10() { return cGroup_10; }
		
		//'nbOfTicketMachines'
		public Keyword getNbOfTicketMachinesKeyword_10_0() { return cNbOfTicketMachinesKeyword_10_0; }
		
		//nbOfTicketMachines=EInt
		public Assignment getNbOfTicketMachinesAssignment_10_1() { return cNbOfTicketMachinesAssignment_10_1; }
		
		//EInt
		public RuleCall getNbOfTicketMachinesEIntParserRuleCall_10_1_0() { return cNbOfTicketMachinesEIntParserRuleCall_10_1_0; }
		
		//('nbOfElevators' nbOfElevators=EInt)?
		public Group getGroup_11() { return cGroup_11; }
		
		//'nbOfElevators'
		public Keyword getNbOfElevatorsKeyword_11_0() { return cNbOfElevatorsKeyword_11_0; }
		
		//nbOfElevators=EInt
		public Assignment getNbOfElevatorsAssignment_11_1() { return cNbOfElevatorsAssignment_11_1; }
		
		//EInt
		public RuleCall getNbOfElevatorsEIntParserRuleCall_11_1_0() { return cNbOfElevatorsEIntParserRuleCall_11_1_0; }
		
		//('zone' zone=EInt)?
		public Group getGroup_12() { return cGroup_12; }
		
		//'zone'
		public Keyword getZoneKeyword_12_0() { return cZoneKeyword_12_0; }
		
		//zone=EInt
		public Assignment getZoneAssignment_12_1() { return cZoneAssignment_12_1; }
		
		//EInt
		public RuleCall getZoneEIntParserRuleCall_12_1_0() { return cZoneEIntParserRuleCall_12_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_13() { return cRightCurlyBracketKeyword_13; }
	}
	public class LineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.city.network.xtext.CityDsl.Line");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLineAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLineKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cOfKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cTypeAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cTypeTransportTypeEnumRuleCall_4_1_0 = (RuleCall)cTypeAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cTopologyKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cTopologyAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cTopologyTopologyEnumRuleCall_5_1_0 = (RuleCall)cTopologyAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cStationsKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cStationsAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final CrossReference cStationsStationCrossReference_6_2_0 = (CrossReference)cStationsAssignment_6_2.eContents().get(0);
		private final RuleCall cStationsStationIDTerminalRuleCall_6_2_0_1 = (RuleCall)cStationsStationCrossReference_6_2_0.eContents().get(1);
		private final Group cGroup_6_3 = (Group)cGroup_6.eContents().get(3);
		private final Keyword cCommaKeyword_6_3_0 = (Keyword)cGroup_6_3.eContents().get(0);
		private final Assignment cStationsAssignment_6_3_1 = (Assignment)cGroup_6_3.eContents().get(1);
		private final CrossReference cStationsStationCrossReference_6_3_1_0 = (CrossReference)cStationsAssignment_6_3_1.eContents().get(0);
		private final RuleCall cStationsStationIDTerminalRuleCall_6_3_1_0_1 = (RuleCall)cStationsStationCrossReference_6_3_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_6_4 = (Keyword)cGroup_6.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Line:
		//	{Line}
		//	'Line'
		//	name=ID '{' ('of' type=TransportType)? ('topology' topology=Topology)? ('stations' '(' stations+=[Station] (","
		//	stations+=[Station])* ')')?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Line} 'Line' name=ID '{' ('of' type=TransportType)? ('topology' topology=Topology)? ('stations' '(' stations+=[Station]
		//("," stations+=[Station])* ')')? '}'
		public Group getGroup() { return cGroup; }
		
		//{Line}
		public Action getLineAction_0() { return cLineAction_0; }
		
		//'Line'
		public Keyword getLineKeyword_1() { return cLineKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//('of' type=TransportType)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'of'
		public Keyword getOfKeyword_4_0() { return cOfKeyword_4_0; }
		
		//type=TransportType
		public Assignment getTypeAssignment_4_1() { return cTypeAssignment_4_1; }
		
		//TransportType
		public RuleCall getTypeTransportTypeEnumRuleCall_4_1_0() { return cTypeTransportTypeEnumRuleCall_4_1_0; }
		
		//('topology' topology=Topology)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'topology'
		public Keyword getTopologyKeyword_5_0() { return cTopologyKeyword_5_0; }
		
		//topology=Topology
		public Assignment getTopologyAssignment_5_1() { return cTopologyAssignment_5_1; }
		
		//Topology
		public RuleCall getTopologyTopologyEnumRuleCall_5_1_0() { return cTopologyTopologyEnumRuleCall_5_1_0; }
		
		//('stations' '(' stations+=[Station] ("," stations+=[Station])* ')')?
		public Group getGroup_6() { return cGroup_6; }
		
		//'stations'
		public Keyword getStationsKeyword_6_0() { return cStationsKeyword_6_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_6_1() { return cLeftParenthesisKeyword_6_1; }
		
		//stations+=[Station]
		public Assignment getStationsAssignment_6_2() { return cStationsAssignment_6_2; }
		
		//[Station]
		public CrossReference getStationsStationCrossReference_6_2_0() { return cStationsStationCrossReference_6_2_0; }
		
		//ID
		public RuleCall getStationsStationIDTerminalRuleCall_6_2_0_1() { return cStationsStationIDTerminalRuleCall_6_2_0_1; }
		
		//("," stations+=[Station])*
		public Group getGroup_6_3() { return cGroup_6_3; }
		
		//","
		public Keyword getCommaKeyword_6_3_0() { return cCommaKeyword_6_3_0; }
		
		//stations+=[Station]
		public Assignment getStationsAssignment_6_3_1() { return cStationsAssignment_6_3_1; }
		
		//[Station]
		public CrossReference getStationsStationCrossReference_6_3_1_0() { return cStationsStationCrossReference_6_3_1_0; }
		
		//ID
		public RuleCall getStationsStationIDTerminalRuleCall_6_3_1_0_1() { return cStationsStationIDTerminalRuleCall_6_3_1_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6_4() { return cRightParenthesisKeyword_6_4; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class EBooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.city.network.xtext.CityDsl.EBoolean");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//EBoolean ecore::EBoolean:
		//	'true' | 'false';
		@Override public ParserRule getRule() { return rule; }
		
		//'true' | 'false'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'true'
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }
		
		//'false'
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}
	public class EIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.city.network.xtext.CityDsl.EInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//EInt ecore::EInt:
		//	'-'? INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	
	public class TransportTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "com.city.network.xtext.CityDsl.TransportType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cBUSEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cBUSBUSKeyword_0_0 = (Keyword)cBUSEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cMETROEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cMETROMETROKeyword_1_0 = (Keyword)cMETROEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cTRAINEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cTRAINTRAINKeyword_2_0 = (Keyword)cTRAINEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cTRAMWAYEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cTRAMWAYTRAMWAYKeyword_3_0 = (Keyword)cTRAMWAYEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum TransportType:
		//	BUS | METRO | TRAIN | TRAMWAY;
		public EnumRule getRule() { return rule; }
		
		//BUS | METRO | TRAIN | TRAMWAY
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//BUS
		public EnumLiteralDeclaration getBUSEnumLiteralDeclaration_0() { return cBUSEnumLiteralDeclaration_0; }
		
		//'BUS'
		public Keyword getBUSBUSKeyword_0_0() { return cBUSBUSKeyword_0_0; }
		
		//METRO
		public EnumLiteralDeclaration getMETROEnumLiteralDeclaration_1() { return cMETROEnumLiteralDeclaration_1; }
		
		//'METRO'
		public Keyword getMETROMETROKeyword_1_0() { return cMETROMETROKeyword_1_0; }
		
		//TRAIN
		public EnumLiteralDeclaration getTRAINEnumLiteralDeclaration_2() { return cTRAINEnumLiteralDeclaration_2; }
		
		//'TRAIN'
		public Keyword getTRAINTRAINKeyword_2_0() { return cTRAINTRAINKeyword_2_0; }
		
		//TRAMWAY
		public EnumLiteralDeclaration getTRAMWAYEnumLiteralDeclaration_3() { return cTRAMWAYEnumLiteralDeclaration_3; }
		
		//'TRAMWAY'
		public Keyword getTRAMWAYTRAMWAYKeyword_3_0() { return cTRAMWAYTRAMWAYKeyword_3_0; }
	}
	public class TopologyElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "com.city.network.xtext.CityDsl.Topology");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cLINEAREnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cLINEARLINEARKeyword_0_0 = (Keyword)cLINEAREnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cCIRCULAREnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cCIRCULARCIRCULARKeyword_1_0 = (Keyword)cCIRCULAREnumLiteralDeclaration_1.eContents().get(0);
		
		//enum Topology:
		//	LINEAR | CIRCULAR;
		public EnumRule getRule() { return rule; }
		
		//LINEAR | CIRCULAR
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LINEAR
		public EnumLiteralDeclaration getLINEAREnumLiteralDeclaration_0() { return cLINEAREnumLiteralDeclaration_0; }
		
		//'LINEAR'
		public Keyword getLINEARLINEARKeyword_0_0() { return cLINEARLINEARKeyword_0_0; }
		
		//CIRCULAR
		public EnumLiteralDeclaration getCIRCULAREnumLiteralDeclaration_1() { return cCIRCULAREnumLiteralDeclaration_1; }
		
		//'CIRCULAR'
		public Keyword getCIRCULARCIRCULARKeyword_1_0() { return cCIRCULARCIRCULARKeyword_1_0; }
	}
	
	private final CityElements pCity;
	private final EDoubleElements pEDouble;
	private final EFloatElements pEFloat;
	private final EStringElements pEString;
	private final StationElements pStation;
	private final LineElements pLine;
	private final TransportTypeElements eTransportType;
	private final EBooleanElements pEBoolean;
	private final EIntElements pEInt;
	private final TopologyElements eTopology;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public CityDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pCity = new CityElements();
		this.pEDouble = new EDoubleElements();
		this.pEFloat = new EFloatElements();
		this.pEString = new EStringElements();
		this.pStation = new StationElements();
		this.pLine = new LineElements();
		this.eTransportType = new TransportTypeElements();
		this.pEBoolean = new EBooleanElements();
		this.pEInt = new EIntElements();
		this.eTopology = new TopologyElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.city.network.xtext.CityDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//City:
	//	{City}
	//	'City'
	//	name=EString
	//	'{' ('location' '(' ('longitude' longitude=EDouble) ('latitude' latitude=EDouble) ('altitude' altitude=EFloat) ')')?
	//	('country' country=EString)? (stations+=Station stations+=Station*)? (lines+=Line lines+=Line*)?
	//	'}';
	public CityElements getCityAccess() {
		return pCity;
	}
	
	public ParserRule getCityRule() {
		return getCityAccess().getRule();
	}
	
	//EDouble ecore::EDouble:
	//	'-'? INT? '.' INT (('E' | 'e') '-'? INT)?;
	public EDoubleElements getEDoubleAccess() {
		return pEDouble;
	}
	
	public ParserRule getEDoubleRule() {
		return getEDoubleAccess().getRule();
	}
	
	//EFloat ecore::EFloat:
	//	'-'? INT? '.' INT (('E' | 'e') '-'? INT)?;
	public EFloatElements getEFloatAccess() {
		return pEFloat;
	}
	
	public ParserRule getEFloatRule() {
		return getEFloatAccess().getRule();
	}
	
	//EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//Station:
	//	'Station'
	//	name=ID '{' ('location' '(' ('longitude' longitude=EDouble) ('latitude' latitude=EDouble) ('altitude' altitude=EFloat)
	//	')')?
	//	office?='hasOffice'?
	//	opened?='isOpened'?
	//	disabledAccess?='hasDisabledAccess'?
	//	'type' type+=TransportType ("," type+=TransportType)* ('nbOfTicketMachines' nbOfTicketMachines=EInt)? ('nbOfElevators'
	//	nbOfElevators=EInt)? ('zone' zone=EInt)? '}';
	public StationElements getStationAccess() {
		return pStation;
	}
	
	public ParserRule getStationRule() {
		return getStationAccess().getRule();
	}
	
	//Line:
	//	{Line}
	//	'Line'
	//	name=ID '{' ('of' type=TransportType)? ('topology' topology=Topology)? ('stations' '(' stations+=[Station] (","
	//	stations+=[Station])* ')')?
	//	'}';
	public LineElements getLineAccess() {
		return pLine;
	}
	
	public ParserRule getLineRule() {
		return getLineAccess().getRule();
	}
	
	//enum TransportType:
	//	BUS | METRO | TRAIN | TRAMWAY;
	public TransportTypeElements getTransportTypeAccess() {
		return eTransportType;
	}
	
	public EnumRule getTransportTypeRule() {
		return getTransportTypeAccess().getRule();
	}
	
	//EBoolean ecore::EBoolean:
	//	'true' | 'false';
	public EBooleanElements getEBooleanAccess() {
		return pEBoolean;
	}
	
	public ParserRule getEBooleanRule() {
		return getEBooleanAccess().getRule();
	}
	
	//EInt ecore::EInt:
	//	'-'? INT;
	public EIntElements getEIntAccess() {
		return pEInt;
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}
	
	//enum Topology:
	//	LINEAR | CIRCULAR;
	public TopologyElements getTopologyAccess() {
		return eTopology;
	}
	
	public EnumRule getTopologyRule() {
		return getTopologyAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
